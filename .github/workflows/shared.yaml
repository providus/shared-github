name: Build & Deploy

on:
  workflow_call:
    inputs:
      cr-host:
        required: false
        type: string
        default: "docker.io"
        description: "Container registry hostname"
      cr-login:
        required: true
        type: string
        description: "Username for container registry"
      build-context:
        required: false
        type: string
        default: "."
        description: "Build context for docker build"
      image-name:
        required: true
        type: string
        description: "Name of the image, format quay.io/providus/tenant-service or just providus/tenant-service"
      argocd-host:
        required: true
        type: string
        description: "ArgoCD hostname"
      argocd-version:
        required: false
        type: string
        description: "ArgoCD binary version"
        default: "2.11.7"
      tenant:
        required: true
        type: string
        description: "Tenant name"
      app-name:
        required: true
        type: string
      sonar-host:
        required: false
        type: string
        default: "https://sonarqube.infra.providus.rs/"
        description: "Address of sonar scannner"
    secrets:
      cr-pass:
        required: true
        description: "Password for container registry"
      argocd-token:
        required: true
        description: "Authentication to ArgoCD"
      sonar-token:
        required: false
        description: "Sonar Token"

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      repo_name: ${{ steps.check.outputs.repo_name
      sonar: ${{ steps.check.outputs.sonar }}
      type: ${{ steps.check.outputs.type }}
      version: ${{ steps.check.outputs.version }}
      sha_short: ${{ steps.check.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v4
      - name: Check
        id: check
        shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT 
          echo "repo_name=$(echo ${{ github.repository }} | cut -f2 -d/ )">> $GITHUB_OUTPUT
          if [[ ${{ secrets.sonar-token }} ]]; then 
            echo "sonar=true"   >> $GITHUB_OUTPUT
          fi
          if [ 0 -lt $(ls *.sln */*.sln 2>/dev/null | wc -w) ]; then 
            echo "We are in DotNet!"; 
            echo "type=dotnet"                    >> $GITHUB_OUTPUT
            echo "version=$(cat .dotnet-version)" >> $GITHUB_OUTPUT
          fi
          if [ 0 -lt $(ls package.json */package.json 2>/dev/null | wc -w) ]; then 
            echo "We are in NodeJS"; 
            echo "type=nodejs"                    >> $GITHUB_OUTPUT
            echo "version=$(cat .nodejs-version)" >> $GITHUB_OUTPUT
          fi
          if [ 0 -lt $(ls pom.xml */pom.xml 2>/dev/null | wc -w) ]; then 
            echo "We are in Java"; 
            echo "type=java"                      >> $GITHUB_OUTPUT
            echo "version=$(cat .java-version)"   >> $GITHUB_OUTPUT
          fi
  scan:
    runs-on: ubuntu-24.04
    needs: [prepare]
    if: ${{ needs.prepare.outputs.sonar }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ needs.prepare.outputs.version }}
      - name: Run sonar
        shell: bash
        run: |
          if [ "${{ needs.prepare.outputs.type }}" = "dotnet" ]; then 
            dotnet tool install --global dotnet-sonarscanner --version 5.15.0
            dotnet sonarscanner begin \
              /k:${{ needs.prepare.outputs.repo_name }} \
              /d:sonar.host.url=${{ inputs.sonar-host }} \
              /d:sonar.login=${{ secrets.sonar-token }}
            dotnet build
            dotnet sonarscanner end /d:sonar.login=${{ secrets.sonar-token }}
          fi

  build:
    runs-on: ubuntu-24.04
    needs: [prepare]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ inputs.cr-host }}
          username: ${{ inputs.cr-login }}
          password: ${{ secrets.cr-pass }}
      - uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.build-context }}
          push: true
          build-args: |
            DOTNET_VERSION=${{ needs.prepare.outputs.version }}
          tags: ${{ inputs.cr-host }}/${{ inputs.image-name }}:${{ needs.prepare.outputs.sha_short }}

  deploy:
    needs: [prepare,build]
    runs-on: ubuntu-24.04
    steps:
      - name: Deploy ${{ matrix.target }}
        shell: bash
        env:
          ARGOCD_SERVER: ${{ inputs.argocd-host }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.argocd-token }}
        run: |
          curl -sSLO https://github.com/argoproj/argo-cd/releases/download/v${{ inputs.argocd-version }}/argocd-linux-amd64
          sudo install -m 555 argocd* /usr/local/bin/argocd
          
          argocd app list --grpc-web | grep "^argocd/${{ inputs.tenant }}--${{ inputs.app-name }}" | awk '{print $1}' | awk -F/ '{print $2}'
          
          for app in $(argocd app list --grpc-web|grep "^argocd/${{ inputs.tenant }}--${{ inputs.app-name }}"|awk '{print $1}'|awk -F/ '{print $2}'); do
            argocd --grpc-web app set ${app} -p image.tag=${{ needs.prepare.outputs.sha_short }};
          done
